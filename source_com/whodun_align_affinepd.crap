

/**An item of interest in an alignment.*/
class FocusStack{
public:
	/**
	 * Sets up the info.
	 * @param fI The i index.
	 * @param fJ The j index.
	 * @param dirFlag The paths to go down.
	 * @param pathSc The score of the path this is on.
	 * @param howG How this node was arrived at. 0 for start.
	 */
	FocusStack(int fI, int fJ, int dirFlag, int pathSc, int howG){
		focI = fI;
		focJ = fJ;
		liveDirs = dirFlag;
		//guard here
		bool fI0 = fI == 0; bool fIg0 = fI > 0; bool fI1 = fI == 1; bool fIg1 = fI > 1;
		bool fJ0 = fJ == 0; bool fJg0 = fJ > 0; bool fJ1 = fJ == 1; bool fJg1 = fJ > 1;
		//match match	: (i==1 && j==1) || (i>1 && j>1)
		if(!((fIg1 && fJg1) || (fI1 && fJ1)))
			{ liveDirs = liveDirs & ~ALIGN_NEED_MATCH_MATCH; }
		//match skipa	: j>0 && i>1
		if(!(fJg0 && fIg1))
			{ liveDirs = liveDirs & ~ALIGN_NEED_MATCH_SKIPA; }
		//match skipb	: i>0 && j>1
		if(!(fIg0 && fJg1))
			{ liveDirs = liveDirs & ~ALIGN_NEED_MATCH_SKIPB; }
		//skipa match	: (i>1 && j>0) || (i==1 && j==0)
		if(!((fIg1 && fJg0) || (fI1 && fJ0)))
			{ liveDirs = liveDirs & ~ALIGN_NEED_SKIPA_MATCH; }
		//skipa skipa	: (i>1)
		if(!(fIg1))
			{ liveDirs = liveDirs & ~ALIGN_NEED_SKIPA_SKIPA; }
		//skipa skipb	: i>0 && j>0
		if(!(fIg0 && fJg0))
			{ liveDirs = liveDirs & ~ALIGN_NEED_SKIPA_SKIPB; }
		//skipb match	: (i>0 && j>1) || (i==0 && j==1)
		if(!((fIg0 && fJg1) || (fI0 && fJ1)))
			{ liveDirs = liveDirs & ~ALIGN_NEED_SKIPB_MATCH; }
		//skipb skipa	: i>0 && j>0
		if(!(fIg0 && fJg0))
			{ liveDirs = liveDirs & ~ALIGN_NEED_SKIPB_SKIPA; }
		//skipb skipb	: (j>1)
		if(!(fJg1))
			{ liveDirs = liveDirs & ~ALIGN_NEED_SKIPB_SKIPB; }
		pathScore = pathSc;
		howGot = howG;
	}
	/**
	 * Copy constructor.
	 * @param toCopy The stuff to copy.
	 */
	FocusStack(const FocusStack& toCopy){
		focI = toCopy.focI;
		focJ = toCopy.focJ;
		liveDirs = toCopy.liveDirs;
		pathScore = toCopy.pathScore;
		howGot = toCopy.howGot;
	}
	/**The i index.*/
	int focI;
	/**The j index.*/
	int focJ;
	/**The directions left to consider.*/
	int liveDirs;
	/**The score for this path.*/
	int pathScore;
	/**How this location was approached.*/
	int howGot;
};