#ifndef WHODUN_RANDOMS_H
#define WHODUN_RANDOMS_H 1

#include <stdint.h>

#define DOUBLE_STANNORM_TEMPS 1024

/**A random number generator.*/
class RandomGenerator{
public:
	/**Allow subclasses to clean up.*/
	virtual ~RandomGenerator();
	
	/**
	 * Get the number of bytes this needs as a seed.
	 * @return The number of needed bytes.
	 */
	virtual int seedSize() = 0;
	/**
	 * Seed this generator.
	 * @param seedV THe seed value.
	 */
	virtual void seed(char* seedV) = 0;
	/**
	 * Get the next byte from this generator.
	 * @return The next random byte.
	 */
	virtual char getByte() = 0;
	
	/**
	 * Get some bytes.
	 * @param numByte The number of bytes to get.
	 * @param toFill The place to put the bytes.
	 */
	void getBytes(int numByte, char* toFill);
	/**
	 * Get random doubles between 0 and 1.
	 * @param numByte The number of doubles to get.
	 * @param toFill The place to put the doubles.
	 */
	void getDoubles(int numByte, double* toFill);
	/**
	 * Get random doubles from the standard normal distribution.
	 * @param numByte The number of doubles to get.
	 * @param toFill The place to put the doubles.
	 */
	void getStandardNormal(int numByte, double* toFill);
	/**Temporary storage for generating standard normal values.*/
	double dblBufferA[DOUBLE_STANNORM_TEMPS];
	/**Temporary storage for generating standard normal values.*/
	double dblBufferB[DOUBLE_STANNORM_TEMPS];
};

#define MERSENNE_TWIST_N 624
#define MERSENNE_TWIST_M 397
#define MERSENNE_TWIST_MATRIXA 0x9908B0DFUL
#define MERSENNE_TWIST_UPPERMASK 0x80000000UL
#define MERSENNE_TWIST_LOWERMASK 0x7FFFFFFFUL

/**The mersenne twister.*/
class MersenneTwisterGenerator : public RandomGenerator{
public:
	/**Set up.*/
	MersenneTwisterGenerator();
	/**Clean up.*/
	virtual ~MersenneTwisterGenerator();
	int seedSize();
	void seed(char* seedV);
	char getByte();
	
	/**Whether this thing has been seeded.*/
	bool haveSeed;
	/**The state array.*/
	uint32_t mtarr[MERSENNE_TWIST_N];
	/**The next entry in the array to use.*/
	int nextEnt;
	/**The number of ready bytes.*/
	int numPG;
	/**Previously generated bytes.*/
	uint32_t prevGen;
};

#endif